/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package edu.duke.ece568.client;

import java.io.*;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;

public class Client{
    private final String host;
    private final InputStream in;
    private final OutputStream out;
    private final OutputStreamWriter writer;
    private final BufferedReader reader;
    private final Socket socket;
    private final int PORT_NUM = 12345;
    public Client(String host) throws IOException {
        this.host = host;
        this.socket = new Socket(this.host,this.PORT_NUM);
        this.in = socket.getInputStream();
        this.out = socket.getOutputStream();
        this.writer = new OutputStreamWriter(out, StandardCharsets.UTF_8);
        this.reader = new BufferedReader(new InputStreamReader(in, StandardCharsets.UTF_8));
    }

    public void sendMsg(String msg) throws IOException {
        this.writer.write(msg + "\n");
        this.writer.flush();
    }

    /**
     * Receive messgae from the server
     *
     * @return String
     * @throws IOException
     */
    public String recvMsg() throws IOException {
        return this.reader.readLine();
    }

    public void disconnect() throws IOException{
        this.socket.close();
    }

    public static void main(String[] args) {
        ArrayList<Thread> threadPool = new ArrayList<>();
        for(int i = 0; i < 5; i++){
            try {
                Client client = new Client("vcm-26330.vm.duke.edu");
                ClientRunnable clientRunnable = new ClientRunnable(client.socket);
                Thread t = new Thread(clientRunnable);
                threadPool.add(t);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        Timestamp timeStart = Timestamp.from(Instant.now());

        for(Thread t: threadPool){
            t.start();
        }

        for(Thread t: threadPool){
            try {
                t.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        Timestamp timeEnd = Timestamp.from(Instant.now());
        
        long diff = timeEnd.getTime() - timeStart.getTime();
        long seconds = TimeUnit.MILLISECONDS.toSeconds(diff);
        System.out.println("Finished 100 queries in " + seconds + " seconds");
    }
}